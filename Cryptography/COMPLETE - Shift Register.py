# A shift register is a system for generating a binary sequence
# An n-bit shift register has n "boxes"
# It starts with an initial state, which is some binary sequence of length n
# Some boxes are connected to an "adder"
# At each iteration, all values in each box shift to the left, with the first number dropping out
# The new number at the end is determined by the adder, which sums the values in its connected boxes
# An n-bit shift register can be represented by a polynomial of degree n with binary coefficients
# A simple way of illustrating the output is by writing out the initial state
# Followed by each value generated by the adder

# Generate the output sequence
# Start with polynomial degree n and initial state of length n

# Convert between diagram and polynomial

def polynomial_code_to_str(polynomial_code: str) -> None:
    """From a string of 0s and 1s representing coefficients, print the associated polynomial"""
    polynomial_str = ""
    for char, i, j in list(zip(polynomial_code, range(len(polynomial_code)-1, -1, -1), range(len(polynomial_code)))):
        print(f"{char}, {i}, {j}")
        if j == 0: # On the first iteration..
            polynomial_str += f"x^{i}" # ... the polynomial's degree should show,
            ## even if the number given in the string was mistakenly 0
        else:
            if i != 1 and char == "1":
                polynomial_str += f" + x^{i}"
            if i == 1 and char == "1":
                polynomial_str += f" + 1"
    return polynomial_str

def diagram_from_polynomial(polynomial_code: str):
    """
    Polynomial is represented by a string of 0s and 1s, coefficients of each term in the polynomial.
    """
    print(polynomial_code[:-1])

    for i in range(len(polynomial_code)):
        print("  ___  ", end="")

    print("\n", end="")
    for char in polynomial_code[1:][::-1]:
        if char == "1":
            print("   +   ", end="")
        else:
            print("       ", end="")

print(polynomial_code_to_str("11111"))

diagram_from_polynomial("11111")